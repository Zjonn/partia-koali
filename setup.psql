--BEGIN;
CREATE EXTENSION pgcrypto;

CREATE TABLE UsedID (
    id integer PRIMARY KEY
);

CREATE TABLE Member(
    member_id       integer     PRIMARY KEY REFERENCES UsedID(id),
    password        varchar     NOT NULL,
    last_act_time   timestamp   NOT NULL,
    upvotes         integer     NOT NULL DEFAULT 0,
    downvotes       integer     NOT NULL DEFAULT 0
);

CREATE TABLE Leader(
    member_id       integer     PRIMARY KEY REFERENCES Member(member_id)
);

CREATE TABLE Project(
    project_id      integer     PRIMARY KEY REFERENCES UsedID(id),
    authority       integer     NOT NULL
);

CREATE TABLE Action(
    action_id       integer     PRIMARY KEY REFERENCES UsedID(id),
    action_type     varchar     NOT NULL CHECK (action_type IN ('support', 'protest')),
    project_id      integer     REFERENCES Project(project_id),
    member_id       integer     REFERENCES Member(member_id)
);

CREATE TABLE Vote(
    member_id       integer     REFERENCES Member(member_id),
    action_id       integer     REFERENCES Action(action_id),
    vote            integer     NOT NULL CHECK (vote = -1 OR vote = 1),
    CONSTRAINT only_one_vote UNIQUE (member_id, action_id)
);

CREATE OR REPLACE FUNCTION leader(integer, text, integer, boolean) RETURNS void AS
$$
    BEGIN
        IF $4
        THEN
            INSERT INTO Member(member_id, password, last_act_time, upvotes, downvotes)
                VALUES($3, crypt($2, gen_salt('md5')), to_timestamp($1), DEFAULT, DEFAULT);
            INSERT INTO Leader(member_id)
                VALUES($3);
        ELSE
            IF(SELECT member_id FROM Leader
                JOIN Member USING(member_id)
                WHERE member_id = $3 AND password = crypt($2, password)
                AND to_timestamp($1) - last_act_time <= interval '1 year') IS NOT NULL
            THEN
                UPDATE Member
                SET last_act_time = to_timestamp($1)
                WHERE member_id = $3;
            ELSE
                RAISE EXCEPTION 'Ups, somethink goes wrong';
            END IF;
        END IF;
    END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION member(integer, text, integer) RETURNS void AS
$$
    BEGIN
        IF (SELECT member_id FROM Member WHERE member_id = $3
            AND password != crypt($2, password)) IS NOT NULL
        THEN
            RAISE EXCEPTION 'Incorrect password';
        ELSIF (SELECT member_id FROM Member WHERE member_id = $3) IS NOT NULL
        THEN
            IF (SELECT member_id FROM Member WHERE member_id = $3
                AND to_timestamp($1) - last_act_time > interval '1 year') IS NOT NULL
            THEN
                RAISE EXCEPTION 'Frozen user';
            END IF;

            UPDATE Member
                SET last_act_time = to_timestamp($1)
                WHERE member_id = $3;
        ELSE
            INSERT INTO Member(member_id, password, last_act_time, upvotes, downvotes)
                VALUES($3, crypt($2, gen_salt('md5')), to_timestamp($1), DEFAULT, DEFAULT);
        END IF;
    END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION add_m_usedid() RETURNS TRIGGER AS
$$
   BEGIN
      INSERT INTO UsedID(id) VALUES (new.member_id);
      RETURN NEW;
   END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION add_p_usedid() RETURNS TRIGGER AS
$$
   BEGIN
      INSERT INTO UsedID(id) VALUES (new.project_id);
      INSERT INTO UsedID(id) VALUES (new.authority);
      RETURN NEW;
   END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION add_a_usedid() RETURNS TRIGGER AS
$$
   BEGIN
      INSERT INTO UsedID(id) VALUES (new.action_id);
      RETURN NEW;
   END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER member_usedid BEFORE INSERT ON Member
FOR EACH ROW EXECUTE PROCEDURE add_m_usedid();

CREATE TRIGGER project_usedid BEFORE INSERT ON Project
FOR EACH ROW EXECUTE PROCEDURE add_p_usedid();

CREATE TRIGGER action_usedid BEFORE INSERT ON Action
FOR EACH ROW EXECUTE PROCEDURE add_a_usedid();


CREATE USER app WITH ENCRYPTED PASSWORD 'qwerty';

GRANT SELECT, INSERT, UPDATE ON TABLE Member TO app;
GRANT SELECT, INSERT ON TABLE Action, Project, Vote , UsedID TO app;
GRANT SELECT  ON TABLE Leader TO app;

--ROLLBACK;
